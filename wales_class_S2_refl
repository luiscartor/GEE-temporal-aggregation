/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-3.93585205078125, 51.76096972948553],
          [-3.1475830078125, 51.70653761484245],
          [-3.1640625, 52.41240232190547],
          [-3.97705078125, 52.48271059558372]]]),
    geometry2 = /* color: #98ff00 */ee.Geometry.Polygon(
        [[[-3.1146240234375, 51.97458891915377],
          [-4.010009765625, 52.22092944350534],
          [-3.603515625, 51.59399322943662]]]),
    geometry3 = /* color: #0b4a8b */ee.Geometry.Polygon(
        [[[-3.3837890625, 52.09624193730752],
          [-3.3233644254505634, 52.95511942764372],
          [-4.119873214513063, 52.92532543388114],
          [-4.103393722325563, 52.08274148621856]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var walespoint = /* color: #98ff00 */ee.Geometry.Point([-3.541717529296875, 53.1253499619115]);



// Function to mask clouds using the Sentinel-2 QA band.
function maskS2clouds(image) {
  var qa = image.select('QA60');
  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = Math.pow(2, 10);
  var cirrusBitMask = Math.pow(2, 11);
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
             qa.bitwiseAnd(cirrusBitMask).eq(0));
  // Return the masked and scaled data.
  return image.updateMask(mask).divide(10000);
}



// Load S2 1-C input imagery.
var S2_spr = ee.ImageCollection('COPERNICUS/S2')
  // Filter to get only one year of images.
  .filterDate('2017-01-04', '2017-01-6')
  // Filter to get only images under the region of interest.
  //.filter(ee.Filter.eq('WRS_PATH', 204))
  //.filter(ee.Filter.eq('WRS_ROW', 23))
  // Sentinel cloud mask is less selective than Landsat, so some people pre filter by relatively cloud free images
  //.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
  .filterBounds(geometry3)
  .map(maskS2clouds)
  .select(['B2', 'B3','B4', 'B5', 'B6','B7','B8','B11','B12']);
  
var S2_win = ee.ImageCollection('COPERNICUS/S2')
  // Filter to get only one year of images.
  .filterDate('2017-06-15', '2017-06-19')
  // Filter to get only images under the region of interest.
  //.filter(ee.Filter.eq('WRS_PATH', 204))
  //.filter(ee.Filter.eq('WRS_ROW', 23))
  .filterBounds(geometry3)
  .map(maskS2clouds)
  .select(['B2', 'B3','B4', 'B5', 'B6','B7','B8','B11','B12']);


var comp = S2_spr.addBands(S2_win);
Map.addLayer(S2_spr, {bands: ['B5', 'B4', 'B3']}, 'comp');


var S2_spr_median = S2_spr.median()//.clip(landsat.geometry());//.reproject('EPSG:4326',null,30);
var S2_win_median = S2_win.median();
print(S2_spr_median.projection().nominalScale());

var S2_spr_var = S2_spr.reduce(ee.Reducer.variance());
var S2_win_var = S2_win.reduce(ee.Reducer.variance());

// Elevation layer
var dem = ee.Image('USGS/SRTMGL1_003').clip(S2_spr.geometry())//.reproject(proj);

// Distance to sea layer
var distsea = ee.Image('users/luiscartor/distsea').int().clip(S2_spr.geometry())//.reproject(proj);

// Classification training data
var trainingraster = ee.Image('users/luiscartor/wales_c35training_NAs').int();

//Training using sample regions to sample 10000 for each class
var training = S2_spr_median.addBands(dem).addBands(distsea).addBands(trainingraster).stratifiedSample({
  numPoints: 4000,
  classBand: 'b1_1',
  region: S2_spr.geometry(),
  seed:0,
  scale:30,
  projection: 'EPSG:4326',
  //tileScale: 4
});
Export.table.toDrive(training)

// Make a Random Forest classifier and train it.
var classifier = ee.Classifier.randomForest(20)
    .train(training, 'b1_1');

Export.table.toDrive(ee.FeatureCollection(ee.Feature(null, {'matrix': classifier.confusionMatrix()})));


// Classify the input imagery.
var classified = S2_spr_median.addBands(dem).addBands(distsea).classify(classifier);

//Sample used for validation
var testsample = S2_spr_median.addBands(dem).addBands(distsea).addBands(trainingraster).stratifiedSample({
  numPoints: 100,
  region: S2_spr.geometry(), //If region not specified: issues with projections!
  classBand: 'b1_1',
  seed:1, // Different seed from training sample
  scale:30,
  projection: 'EPSG:4326',
  //tileScale: 4
}).filter(ee.Filter.neq('b1_1', null)); // Filter the result to get rid of any null pixels.


// Accuracy assessment
//print(testsample)
var trainAccuracy = testsample.classify(classifier).errorMatrix('b1_1', 'classification');
print('Resubstitution error matrix: ', trainAccuracy);
print('Training overall accuracy: ', trainAccuracy.accuracy());
print('Training kappa: ', trainAccuracy.kappa());


// Define a palette for the classification.
var palette = [
  //'FFFFFF', // non
  'ff0000', // broadleaved f
  '008000', // evergreen
  '8b4513', // arable
  '7CFC00', // improved
  'FFA500', // rough
  '66CDAA', // neutral
  '2E8B57', // calcareous
  '808000', // acid
  'FFFF00', // fen
  '800080', // heather
  'EE82EE', // heather grassland
  '008080', // bog
  '40E0D0', // montaine
  'B0C4DE', // bare rock
  '00008B', // sea
  '0000FF', // water
  'B8860B', // supra
  'B8860B', // supra
  'F0E68C', // litoral
  'F0E68C', // litoral
  '9370DB', // marsh
  '000000', // urban
  'A9A9A9', // semi urban
];

Map.centerObject(walespoint, 8);
Map.addLayer(S2_spr, {bands: ['B5', 'B4', 'B3']}, 'S2 masked');
//Map.addLayer(ndvi_mean,{palette: palette, min:-1, max: 1},'ndvi_mean');
Map.addLayer(trainingraster,{palette: palette, min: 1, max: 23},'training')
Map.addLayer(classified, {palette: palette, min: 1, max: 23}, 'classification');
//Export.image.toDrive({
//    image: classified,
//    description: 'wales_classification_refl_medianvar_twoseasons',
//    scale: 30,
//    maxPixels: 181238292
//    //region: geometry
//});
