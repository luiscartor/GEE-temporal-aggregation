/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var walespoint = /* color: #98ff00 */ee.Geometry.Point([-3.541717529296875, 53.1253499619115]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// Load Landsat 5 input imagery.
//var landsat1 = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1')
var landsat = ee.ImageCollection('LANDSAT/LC8_L1T_TOA_FMASK')
  // Filter to get only one year of images.
  .filterDate('2015-01-01', '2015-12-31')
  // Filter to get only images under the region of interest.
  .filterBounds(walespoint);


// Cloud mask collection
var lan_nocloud =  landsat.map(function(img) {
                  var mask = img.select(['fmask']).neq(4)
                   return img.updateMask(mask)
                   })


var mean = lan_nocloud.reduce(ee.Reducer.mean());

var colwithmean = landsat.map(function(img){
                return img.where(img.select(['fmask']).eq(4), mean);
})


// Selects only reflectance bands
var colwithmean_ref = colwithmean.select(['B1','B2','B3','B4','B5','B6','B7'], ['B1','B2','B3','B4','B5','B6','B7']);

// Multi-date composite
var stackCollection = function(collection) {
  // Create an initial image.
  var first = ee.Image(collection.first()).select([]);
  // Write a function that appends a band to an image.
  var appendBands = function(image, previous) {
    return ee.Image(previous).addBands(image);
  };
  return ee.Image(collection.iterate(appendBands, first));
};

var composite = stackCollection(colwithmean_ref);

// Classification training data
var trainingraster = ee.Image('users/luiscartor/wales_c35training_NAs');
//var trainingpolygons = ee.FeatureCollection('users/luiscartor/wales_c35training_shapefile');

// Sample the input imagery to get a FeatureCollection of training data.
var training = composite.addBands(trainingraster).sample({
  numPixels: 10000,
  seed: 0
});

//var training = composite.sampleRegions({
//collection: trainingpolygons,
//properties: ['class'],
//scale: 30,
//tileScale: 16
//});


// Make a Random Forest classifier and train it.
var classifier = ee.Classifier.randomForest(20)
    .train(training, 'b1');

// Classify the input imagery.
var classified = composite.classify(classifier);

// Define a palette for the classification.
var palette = [
  //'FFFFFF', // non
  'ff0000', // broadleaved f
  '008000', // evergreen
  '8b4513', // arable
  '7CFC00', // improved
  'FFA500', // rough
  '66CDAA', // neutral
  '2E8B57', // calcareous
  '808000', // acid
  'FFFF00', // fen
  '800080', // heather
  'EE82EE', // heather grassland
  '008080', // bog
  '40E0D0', // montaine
  'B0C4DE', // bare rock
  '00008B', // sea
  '0000FF', // water
  'B8860B', // supra
  'B8860B', // supra
  'F0E68C', // litoral
  'F0E68C', // litoral
  '9370DB', // marsh
  '000000', // urban
  'A9A9A9', // semi urban
];


Map.centerObject(walespoint, 10);
//Map.addLayer(lan_nocloud, {bands: ['B4', 'B3', 'B2']}, 'landsat');
//Map.addLayer(mean, {bands: ['B4_mean', 'B3_mean', 'B2_mean']}, 'mean');

Map.addLayer(colwithmean, {bands: ['B4', 'B3', 'B2']}, 'composite');
Map.addLayer(classified, {palette: palette, min: 1, max: 23}, 'classification');


//Export.image.toDrive({
//    image: masked.select(bnds),
//    description: 'MaskedLS5',
//    scale: 30,
//    region: geometry
//});