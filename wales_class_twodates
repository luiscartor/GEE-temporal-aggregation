/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var walespoint = /* color: #98ff00 */ee.Geometry.Point([-3.541717529296875, 53.1253499619115]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// Load Landsat 5 input imagery.
//var landsat1 = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1')
var landsat1 = ee.Image(ee.ImageCollection('LANDSAT/LC8_L1T_TOA_FMASK')

  // Filter to get only one year of images.
  .filterDate('2015-01-01', '2015-05-30')
  // Filter to get only images under the region of interest.
  .filterBounds(walespoint)
  // Sort by scene cloudiness, ascending.
  .sort('CLOUD_COVER')
  // Get the first (least cloudy) scene.
  .first());

// Load Landsat 5 input imagery.
//var landsat2 = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1')
var landsat2 = ee.Image(ee.ImageCollection('LANDSAT/LC8_L1T_TOA_FMASK')
  // Filter to get only one year of images.
  .filterDate('2015-06-01', '2015-12-31')
  // Filter to get only images under the region of interest.
  .filterBounds(walespoint)
  // Sort by scene cloudiness, ascending.
  .sort('CLOUD_COVER')
  // Get the first (least cloudy) scene.
  .first());

//var mosaic = landsat.mosaic();

// Compute cloud score.
//var cloudScore1 = ee.Algorithms.Landsat.simpleCloudScore(landsat1).select('cloud');
//var cloudScore2 = ee.Algorithms.Landsat.simpleCloudScore(landsat2).select('cloud');

// Mask the input for clouds.  Compute the min of the input mask to mask
// pixels where any band is masked.  Combine that with the cloud mask.
//var date1 = landsat1.updateMask(landsat1.mask().reduce('min').and(cloudScore1.lte(90)));
//var date2 = landsat2.updateMask(landsat2.mask().reduce('min').and(cloudScore2.lte(90)));

var date1allb = landsat1.updateMask(landsat1.select(['fmask']).neq(4));
var date2allb = landsat2.updateMask(landsat2.select(['fmask']).neq(4));

var date1 = date1allb.select(['B1','B2','B3','B4','B5','B6','B7'], ['B1','B2','B3','B4','B5','B6','B7'])
var date2 = date2allb.select(['B1','B2','B3','B4','B5','B6','B7'], ['B1','B2','B3','B4','B5','B6','B7'])


// Multi-date composite
var comp = date1.addBands(date2);

var composite = comp.updateMask(landsat2.select(['fmask']).neq(4));

// Use MODIS land cover, IGBP classification, for training.
//var modis = ee.Image('MODIS/051/MCD12Q1/2011_01_01')
//    .select('Land_Cover_Type_1');

var trainingraster = ee.Image('users/luiscartor/wales_c35training_NAs');

// Sample the input imagery to get a FeatureCollection of training data.
var training = composite.addBands(trainingraster).sample({
  numPixels: 1000,
  seed: 0
});

// Make a Random Forest classifier and train it.
var classifier = ee.Classifier.randomForest(20)
    .train(training, 'b1');

// Classify the input imagery.
var classified = composite.classify(classifier);

// Define a palette for the classification.
var palette = [
  //'FFFFFF', // non
  'ff0000', // broadleaved f
  '008000', // evergreen
  '8b4513', // arable
  '7CFC00', // improved
  'FFA500', // rough
  '66CDAA', // neutral
  '2E8B57', // calcareous
  '808000', // acid
  'FFFF00', // fen
  '800080', // heather
  'EE82EE', // heather grassland
  '008080', // bog
  '40E0D0', // montaine
  'B0C4DE', // bare rock
  '00008B', // sea
  '0000FF', // water
  'B8860B', // supra
  'B8860B', // supra
  'F0E68C', // litoral
  'F0E68C', // litoral
  '9370DB', // marsh
  '000000', // urban
  'A9A9A9', // semi urban
];


Map.centerObject(walespoint, 10);
Map.addLayer(date1, {bands: ['B4', 'B3', 'B2']}, 'date1');
Map.addLayer(date2, {bands: ['B4', 'B3', 'B2']}, 'date2');

Map.addLayer(composite, {bands: ['B4', 'B3', 'B2']}, 'composite');//Map.addLayer(classified, {palette: igbpPalette, min: 0, max: 17}, 'classification');
Map.addLayer(classified, {palette: palette, min: 1, max: 23}, 'classification');


//Export.image.toDrive({
//    image: masked.select(bnds),
//    description: 'MaskedLS5',
//    scale: 30,
//    region: geometry
//});