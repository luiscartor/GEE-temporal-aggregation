/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var waleswhole = /* color: #d63000 */ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -5.42724609375,
                53.46175429923478
              ],
              [
                -5.438232421875,
                51.40591676841038
              ],
              [
                -3.0926513671875,
                51.33733281255946
              ],
              [
                -3.3233642578125,
                53.47156438356109
              ],
              [
                -4.8834228515625,
                53.47156438356109
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -3.7847900390625,
                52.32177112417932
              ],
              [
                -3.790283203125,
                52.12997571102905
              ],
              [
                -3.350830078125,
                52.13671940298869
              ],
              [
                -3.372802734375,
                52.31169727783366
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -3.6199951171875,
                52.234388256602806
              ],
              [
                -3.8726806640625,
                52.018557363515
              ],
              [
                -3.6529541015625,
                52.018557363515
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    walespoint = /* color: #98ff00 */ee.Geometry.Point([-3.541717529296875, 53.1253499619115]),
    walespoint2 = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-3.8287353515625, 52.355334053019185],
          [-3.8287353515625, 52.00165153352017],
          [-3.3563232421875, 52.33855597760981]]]),
    gb = /* color: #0b4a8b */ee.Geometry.Polygon(
        [[[-2.21923828125, 59.45575128593424],
          [-3.09814453125, 59.52268443142165],
          [-3.97705078125, 59.1866892765879],
          [-6.767578125, 58.687856756257396],
          [-8.261720091104507, 56.95643060056862],
          [-7.9980482161045074, 56.41336721515868],
          [-7.5805677473545074, 56.181716469586185],
          [-7.1411146223545074, 55.862440441375234],
          [-6.8994154036045074, 55.63985398534689],
          [-6.2622083723545074, 55.39104367937975],
          [-5.6909193098545074, 55.153214546778585],
          [-5.3173841536045074, 54.78746057903884],
          [-5.009765625, 53.51361035100536],
          [-5.7568359375, 51.93012287592946],
          [-6.30615234375, 50.3308199433869],
          [-6.17431640625, 49.6954372273497],
          [-3.58154296875, 49.78064056215444],
          [-2.83447265625, 50.007118437887314],
          [-2.21923828125, 50.1622057617218],
          [-1.16455078125, 50.1622057617218],
          [-0.1318359375, 50.41490340799509],
          [0.966796875, 50.694106175761526],
          [1.2744140625, 50.97165685343167],
          [2.2412095963954926, 53.1330105152123],
          [1.3842760026454926, 53.4482317801829],
          [0.21972522139549255, 54.571501916941415],
          [-1.73583984375, 56.36471529316712],
          [-1.51611328125, 56.87246796542907],
          [-1.07666015625, 57.25475825405784],
          [-1.34033203125, 57.750560737345644],
          [-2.13134765625, 58.99481241666293]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/




// Function to mask clouds using the Sentinel-2 QA band.
function maskS2clouds(image) {
  var qa = image.select('QA60');
  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = Math.pow(2, 10);
  var cirrusBitMask = Math.pow(2, 11);
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
             qa.bitwiseAnd(cirrusBitMask).eq(0));
  // Return the masked and scaled data.
  return image.updateMask(mask).divide(10000).set('system:time_start',image.get('system:time_start'));
}


// Load S2 1-C input imagery.
var S2_spr = ee.ImageCollection('COPERNICUS/S2')
  // Filter to get only one year of images.
  .filterDate('2016-10-01', '2017-09-30')
  // Filter to get only images under the region of interest.
  //.filter(ee.Filter.eq('WRS_PATH', 204))
  //.filter(ee.Filter.eq('WRS_ROW', 23))
  // Sentinel cloud mask is less selective than Landsat, so some people pre filter by relatively cloud free images
  //.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
  .filterBounds(gb)
  .map(maskS2clouds)
  .select(['B2']);
  

var days = ee.ImageCollection('COPERNICUS/S2')
  // Filter to get only one year of images.
  .filterDate('2016-10-01', '2017-09-30')
  // Filter to get only images under the region of interest.
  //.filter(ee.Filter.eq('WRS_PATH', 204))
  //.filter(ee.Filter.eq('WRS_ROW', 23))
  // Sentinel cloud mask is less selective than Landsat, so some people pre filter by relatively cloud free images
  //.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
  .filterBounds(gb)
  .map(maskS2clouds)
  .select(['B2'])
  .map(function(i){
  return ee.Image.constant(i.date().getRelative('day', 'year')).int().updateMask(i.select(0).mask());
})

  
var S2_win = ee.ImageCollection('COPERNICUS/S2')
  // Filter to get only one year of images.
  .filterDate('2017-04-01', '2017-09-30')
  // Filter to get only images under the region of interest.
  //.filter(ee.Filter.eq('WRS_PATH', 204))
  //.filter(ee.Filter.eq('WRS_ROW', 23))
  .filterBounds(walespoint2)
  .map(maskS2clouds)
  .select(['B2']);


//var days = S2_spr.map(function(i){
//  return ee.Image.constant(i.date().getRelative('day', 'year')).int().updateMask(i.select(0).mask());
//})
//print(days)

// Number of non-cloud images per pixel
//var allyear = ee.ImageCollection(S2_spr.merge(S2_win));
//var allyear = S2_spr
//var allyear = allyear.reduce(ee.Reducer.count());
//print(allyear);
//Map.addLayer(allyear,{bands: ['B2_count'],min:0,max:60}, 'allyear');

// To avoid same date pixels (different tile but same date)
var allyearS2 = days.reduce(ee.Reducer.countDistinct());
Map.addLayer(allyearS2,{bands: ['constant_count'],min:0,max:60}, 'days');

// Extract dataset
// GEE uses nearest neighbour as default, so we specify resampling method for the export part
Export.image.toDrive({
  //image: allyearS2.clip(S2_spr.geometry()).int16(),
  image: allyearS2.clip(gb).int16(),
  //region: allyear.geometry(),
  description: 'cloudfreeS2allyear',
  scale: 20,
  crs : 'EPSG:27700',
//  // Dimensions for 30m scale
//  dimensions:"399960x5690220",
//  // Max pixels for 30m scale
//  maxPixels: 399960*5690220
  // Max pixels for 20m scale
   maxPixels:  59577453 ,
  dimensions:"5637x10569",
//  // Max pixels for 10m scale
//  //maxPixels: 2868546986,
//  //dimensions:"22016x130293",
});


// Histogram
//var histogram = ui.Chart.image.histogram(allyearS2.select(['constant_count']),S2_spr.geometry(),100)
//  .setSeriesNames(['constant_count']);

//print(histogram);


var S2_spr_median = S2_spr.median()//.clip(landsat.geometry());//.reproject('EPSG:4326',null,30);
var S2_win_median = S2_win.median();


var S2_spr_var = S2_spr.reduce(ee.Reducer.variance());
var S2_win_var = S2_win.reduce(ee.Reducer.variance());

// Elevation layer
var dem = ee.Image('USGS/SRTMGL1_003').clip(S2_spr.geometry())//.reproject(proj);

// Distance to sea layer
var distsea = ee.Image('users/luiscartor/distsea').int().clip(S2_spr.geometry())//.reproject(proj);

// Classification training data
var trainingraster = ee.Image('users/luiscartor/wales_c35training_NAs').int();

//Training using sample regions to sample 10000 for each class
var training = S2_spr_median.addBands(dem).addBands(distsea).addBands(trainingraster).stratifiedSample({
  numPoints: 4000,
  classBand: 'b1_1',
  region: S2_spr.geometry(),
  seed:0,
  scale:30,
  projection: 'EPSG:4326',
  //tileScale: 4
});
//Export.table.toDrive(training)

// Make a Random Forest classifier and train it.
var classifier = ee.Classifier.randomForest(30)
    .train(training, 'b1_1');

//Export.table.toDrive(ee.FeatureCollection(ee.Feature(null, {'matrix': classifier.confusionMatrix()})));


// Classify the input imagery.
var classified = S2_spr_median.addBands(dem).addBands(distsea).classify(classifier);

//Sample used for validation
var testsample = S2_spr_median.addBands(dem).addBands(distsea).addBands(trainingraster).stratifiedSample({
  numPoints: 100,
  region: S2_spr.geometry(), //If region not specified: issues with projections!
  classBand: 'b1_1',
  seed:1, // Different seed from training sample
  scale:30,
  projection: 'EPSG:4326',
  //tileScale: 4
}).filter(ee.Filter.neq('b1_1', null)); // Filter the result to get rid of any null pixels.


// Accuracy assessment
//print(testsample)
//var trainAccuracy = testsample.classify(classifier).errorMatrix('b1_1', 'classification');
//print('Resubstitution error matrix: ', trainAccuracy);
//print('Training overall accuracy: ', trainAccuracy.accuracy());
//print('Training kappa: ', trainAccuracy.kappa());


// Define a palette for the classification.
var palette = [
  //'FFFFFF', // non
  'ff0000', // broadleaved f
  '008000', // evergreen
  '8b4513', // arable
  '7CFC00', // improved
  'FFA500', // rough
  '66CDAA', // neutral
  '2E8B57', // calcareous
  '808000', // acid
  'FFFF00', // fen
  '800080', // heather
  'EE82EE', // heather grassland
  '008080', // bog
  '40E0D0', // montaine
  'B0C4DE', // bare rock
  '00008B', // sea
  '0000FF', // water
  'B8860B', // supra
  'B8860B', // supra
  'F0E68C', // litoral
  'F0E68C', // litoral
  '9370DB', // marsh
  '000000', // urban
  'A9A9A9', // semi urban
];


Map.centerObject(walespoint, 8);
//Map.addLayer(S2_spr,{bands: ['B5', 'B4', 'B3']}, 'S2 masked');


//Map.addLayer(ndvi_mean,{palette: palette, min:-1, max: 1},'ndvi_mean');
//Map.addLayer(trainingraster,{palette: palette, min: 1, max: 23})
//Map.addLayer(classified, {palette: palette, min: 1, max: 23}, 'classification');
//Export.image.toDrive({
//    image: classified,
//    description: 'wales_classification_refl_medianvar_twoseasons',
//    scale: 30,
//    maxPixels: 181238292
//    //region: geometry
//});
