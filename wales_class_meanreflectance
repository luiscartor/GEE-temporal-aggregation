var walespoint = /* color: #98ff00 */ee.Geometry.Point([-3.541717529296875, 53.1253499619115]);

// Load Landsat 5 input imagery.
//var landsat1 = ee.Image(ee.ImageCollection('LANDSAT/LC08/C01/T1')
var landsat = ee.ImageCollection('LANDSAT/LC8_L1T_TOA_FMASK')
  // Filter to get only one year of images.
  .filterDate('2015-01-01', '2015-12-31')
  // Filter to get only images under the region of interest.
  .filter(ee.Filter.eq('WRS_PATH', 204))
  .filter(ee.Filter.eq('WRS_ROW', 23))
  //.filterBounds(walespoint)
  .map(function(img){
    var mask = img.select(['fmask']).neq(4)
    return img.updateMask(mask)
    })
  .select(['B1', 'B2', 'B3','B4', 'B5', 'B6','B7']);
  

var landsat_median = landsat.median()//.clip(landsat.geometry());//.reproject('EPSG:4326',null,30);
var landsat_var = landsat.reduce(ee.Reducer.variance());


// Elevation layer
var dem = ee.Image('USGS/SRTMGL1_003').clip(landsat.geometry())//.reproject(proj);

// Distance to sea layer
var distsea = ee.Image('users/luiscartor/distsea').int().clip(landsat.geometry())//.reproject(proj);

// Classification training data
var trainingraster = ee.Image('users/luiscartor/wales_c35training_NAs').int();

//Training using sample regions to sample 10000 for each class
var training = landsat_median.addBands(landsat_var).addBands(dem).addBands(distsea).addBands(trainingraster).stratifiedSample({
  numPoints: 100,
  classBand: 'b1_1',
  region: landsat.geometry(),
  seed:0,
  scale:30,
  projection: 'EPSG:4326',
  //tileScale: 4
});
Export.table.toDrive(training)

// Make a Random Forest classifier and train it.
var classifier = ee.Classifier.randomForest(30)
    .train(training, 'b1_1');

Export.table.toDrive(ee.FeatureCollection(ee.Feature(null, {'matrix': classifier.confusionMatrix()})));


// Classify the input imagery.
var classified = landsat_median.addBands(landsat_var).addBands(dem).addBands(distsea).classify(classifier);

//Sample used for validation
var testsample = landsat_median.addBands(landsat_var).addBands(dem).addBands(distsea).addBands(trainingraster).stratifiedSample({
  numPoints: 100,
  region: landsat.geometry(), //If region not specified: issues with projections!
  classBand: 'b1_1',
  seed:1, // Different seed from training sample
  scale:30,
  projection: 'EPSG:4326',
  //tileScale: 4
}).filter(ee.Filter.neq('b1_1', null)); // Filter the result to get rid of any null pixels.


// Accuracy assessment
print(testsample)
var trainAccuracy = testsample.classify(classifier).errorMatrix('b1_1', 'classification');
print('Resubstitution error matrix: ', trainAccuracy);
print('Training overall accuracy: ', trainAccuracy.accuracy());
print('Training kappa: ', trainAccuracy.kappa());


// Define a palette for the classification.
var palette = [
  //'FFFFFF', // non
  'ff0000', // broadleaved f
  '008000', // evergreen
  '8b4513', // arable
  '7CFC00', // improved
  'FFA500', // rough
  '66CDAA', // neutral
  '2E8B57', // calcareous
  '808000', // acid
  'FFFF00', // fen
  '800080', // heather
  'EE82EE', // heather grassland
  '008080', // bog
  '40E0D0', // montaine
  'B0C4DE', // bare rock
  '00008B', // sea
  '0000FF', // water
  'B8860B', // supra
  'B8860B', // supra
  'F0E68C', // litoral
  'F0E68C', // litoral
  '9370DB', // marsh
  '000000', // urban
  'A9A9A9', // semi urban
];

Map.centerObject(walespoint, 8);
//Map.addLayer(landsat, {bands: ['B4', 'B3', 'B2']}, 'landsat masked');
//Map.addLayer(ndvi_mean,{palette: palette, min:-1, max: 1},'ndvi_mean');
Map.addLayer(trainingraster,{palette: palette, min: 1, max: 23})
Map.addLayer(classified, {palette: palette, min: 1, max: 23}, 'classification');